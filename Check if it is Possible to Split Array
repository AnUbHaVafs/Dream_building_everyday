class Solution {
    bool isValid(int i, int j, int m, vector<int>& nums){
        int n = j-i+1;
        if(n<1)return false;
        else if(n==1)return true;
        else{
            int sum=0;
            for(int k=i;k<=j;k++)sum+=nums[k];
            
            if(sum>=m)return true;
        }
        return false;
    }

public:
    bool canSplitArray(vector<int>& nums, int m) {
        int n = nums.size();
        vector<vector<bool>> dp(n,vector<bool>(n, false));
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                 if(j==i){
                    dp[i][j]= true;
                }
            }
        }
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=n-1;j++){
                
               
                if(dp[i][j]==false){
                      for(int ind=i;ind<=j;ind++){
                    bool canPartition = isValid(i,ind,m,nums) && isValid(ind+1,j,m,nums);
                    if(canPartition){
                        bool l = dp[i][ind];
                        bool r = dp[ind+1][j];
                        if(l && r){
                            dp[i][j]= true;                            
                        }
                        
                    }
                    
                }
                
            }
          }
        }
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++){
        //         cout<<dp[i][j]<<endl;
        //     }
        // }
        return dp[0][n-1];
    }
};
