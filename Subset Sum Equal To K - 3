#include <bits/stdc++.h>
bool f(int ind, int target, vector<int> &arr, vector<vector<int>> &dp){
    if(target==0)return true;
    if(ind==0)return (arr[ind]==target);
    if(dp[ind][target]!=-1)return dp[ind][target];
    bool notTake = f(ind-1,target,arr,dp);
    bool take = false;
    if(target>=arr[ind]){
        take = f(ind-1,target-arr[ind],arr,dp);
    }
    return dp[ind][target]=  take | notTake;
} 
bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<bool>>dp(n, vector<bool>(k+1,0));
    for(int i=0;i<n;i++)dp[i][0]=true;
    dp[0][arr[0]]=true;
    for(int i=1;i<n;i++){
        for(int target=1;target<=k;target++){
             bool notTake = dp[i-1][target];
             bool take = false;
             if(target>=arr[i]){
                 take = dp[i-1][target-arr[i]];
             }
             dp[i][target]=  take | notTake;
        }
    }
    return dp[n-1][k];
}
