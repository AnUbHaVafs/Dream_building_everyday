class Solution {
public:
///// ------------ Combinations Approach --------------- ///////
    int uniquePaths(int m, int n) { 
        double res = 1;
        int N = m+n-2;
        int r = m-1;
        for(int i=1;i<=r;i++){
            res = res*(N-r+i)/i;
        }        
        return (int)res;
    }
};
//// -----------Recursive Approach ----------- ////////
// class Solution {
// private :
//     int giveMeTotalPaths(int m, int n, int i, int j){
//         if(i==m-1 && j==n-1)return 1;
//         if(i>=m || j>=n)return 0;
//         return giveMeTotalPaths(m,n,i+1,j) + giveMeTotalPaths(m,n,i,j+1);
//     }
// public:
//     int uniquePaths(int m, int n) {
//         return giveMeTotalPaths(m,n,0,0);           
//     }
// };



//////-----------------------DP Approach ----------- ///////////////
  // if(n==0 || m==0){
        //     return 0;
        // }
        // if(n==1 || m==1){
        //     return 1;
        // }
        // int dp[m][n];
        // for(int i=1;i<m;i++){
        //     dp[i][0]=1;
        // }
        // for(int i=1;i<n;i++){
        //     dp[0][i]=1;
        // }
        // for(int i=1;i<m;i++){
        //     for(int j=1;j<n;j++){
        //         dp[i][j]=dp[i-1][j]+ dp[i][j-1];
        //     }
        // }
        // return dp[m-1][n-1];
