class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int cnt1=0, cnt2=0;
        int ele1 = INT_MIN;
        int ele2 = INT_MIN;
        int n = nums.size();
        for(int i=0;i<n;i++){
            if(cnt1==0 && ele2 != nums[i]){
                ele1 = nums[i];
                cnt1 = 1;
            }
            else if(cnt2 == 0 && ele1 !=nums[i]){
                ele2 = nums[i];
                cnt2 =1;
            }
            else if(nums[i]==ele1)cnt1++;
            else if(nums[i]==ele2)cnt2++;
            else{
                cnt1--;
                cnt2--;
            }
        }
        int count1=0,count2=0;
        for(int i=0;i<n;i++){
            if(nums[i]==ele1)count1++;
            if(nums[i]==ele2)count2++;
        }
        vector<int> ans;
        if(count1 > (n/3))ans.push_back(ele1);
        if(count2> (n/3))ans.push_back(ele2);
        return ans;
    }
};



/// better approach using map

        // unordered_map<int,int> freq;
        // for(int i=0;i<nums.size();i++){
        //     freq[nums[i]]++;
        // }
        // unordered_map<int,int>::iterator itr;
        // vector<int> ans;
        // for(itr=freq.begin();itr!=freq.end();itr++){
        //     if(itr->second > nums.size()/3){
        //         ans.push_back(itr->first);
        //     }
        // }
        // return ans;
