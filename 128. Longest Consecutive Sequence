class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n=nums.size();
        if(n==0)return 0;
        int longest = 1;
        unordered_set<int> unique;
        for(int num : nums){
            unique.insert(num);
        }
        for(auto it : unique){
            if(unique.find(it-1) == unique.end()){
                int cnt = 1;
                int currEle = it;
                while(unique.find(currEle+1)!=unique.end()){
                    cnt++;
                    currEle = currEle + 1;
                }
                longest = max(longest,cnt);
            }
        }
        return longest;
    }
};
// class Solution
// {
// public:
//     int longestConsecutive(vector<int> &nums)
//     {
//         unordered_set<int> num_set;
//         int max_count = 0, count = 0;

//         for (auto n : nums) {
//             num_set.insert(n);
//         }

//         for (auto n : num_set) {
//             if (!num_set.count(n - 1)) {
//                 count = 0;
//                 while (num_set.count(n)) {
//                     count++;
//                     n = n + 1;
//                 }
//                 max_count = max(count, max_count);
//             }
//         }
//         return max_count;
//     }
// };
