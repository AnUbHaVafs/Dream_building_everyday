/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        // Aim : To create Deep Copy!

        //Step-1 : To create copy nodes and link to adjacent to the original nodes
        Node *itr = head;
        Node *front = head;

        while(itr!=NULL){
            front = itr->next;
            Node *copy = new Node(itr->val);
            itr->next = copy;
            copy->next = front;
            itr = front;
        }

        //Step-2 : to assign the random pointers to copy nodes as well
        itr = head;
        while(itr!=NULL){
            if(itr->random!=NULL){
                itr->next->random = itr->random->next;
            }
            itr=itr->next->next;
        }

        //Step-3: to segregate the copy ll and original ll 
        itr=head;
        Node* pseudoHead = new Node(0);
        Node* copy = pseudoHead;
        while(itr!=NULL){
        front = itr->next->next;
        copy->next=itr->next;
        itr->next=front;
        copy=copy->next;
        itr = front;
        }

        return pseudoHead->next;
    }
};
