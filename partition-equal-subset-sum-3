class Solution {
    bool f(int i, int k, vector<int> &nums, vector<vector<bool>> &dp){
        int n = nums.size();
        for(int i=0;i<n;i++)dp[i][0]=true;
        if(k>=nums[0])dp[0][nums[0]]=true;

        for(int i=1;i<n;i++){
            for(int target=0;target<=k;target++){
                 bool notTake = dp[i-1][target];
                 bool take = false;
                 if(target>=nums[i]){
                 take = dp[i-1][target-nums[i]];
                 }
                 dp[i][target]= take || notTake;
            }
        }
        return dp[n-1][k]; 
    }
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum=0;
        for(int i=0;i<n;i++)sum+=nums[i];
        if(sum%2)return false;
        int target = sum/2;
        vector<vector<bool>> dp(n,vector<bool>(target+1,0));
        return f(n-1,target,nums,dp);
    }
};
