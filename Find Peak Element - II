class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        // binary search on Answer
        int n = nums.size();
         if(n == 1){
            return 0;
        }
        int start = 0;
        int end = n-1;
        while(start<=end){
            int mid = start + ((end-start)/2);
            if(mid>0 && mid < n-1){
                if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1]) return mid;
                else if(nums[mid-1]>nums[mid]){
                    end = mid-1;
                }
                else{
                    start = mid+1;
                }
            }
            else if(mid==0){
                if(nums[mid]>nums[mid+1])return mid;
                else return mid+1;
            }
            else if(mid==n-1){
                if(nums[mid]>nums[mid-1])return mid;
                else return mid-1;
            }
        }
        return 0;

        // int low = 0, high = num.size() - 1;
        // while (low < high - 1) {
        //     int mid = (low + high) / 2;
        //     if (num[mid] > num[mid - 1] && num[mid] > num[mid + 1]) 
        //         return mid;
        //     else if (num[mid] > num[mid + 1]) 
        //             high = mid - 1;
        //          else 
        //             low = mid + 1;    
        // }
        // return num[low] > num[high] ? low : high;

        // int n = num.size();
        // int start = 0;
        // int end = n-1;
        // while(start<end){
        //     int mid = start+((end-start)/2);
        //     if(num[mid]<num[mid+1]){
        //         start=mid+1;
        //     }
        //     else{
        //         end=mid;
        //     }
        // }
        // return start;

        // int first =0,last=arr.size()-1;
        // while(first<=last){
        //     int mid=first+(last - first)/2;
        //         if(arr[mid]<arr[mid+1])
        //             first=mid+1;
        //         else 
        //             last=mid-1;
        // }
        // return first;

    }
};
