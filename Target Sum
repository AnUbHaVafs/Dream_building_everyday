class Solution {
    int countSubsetsWithSumK(int ind, int target, vector<int> &nums){
        //bc
        if(ind==0){
            if(nums[ind]==0 && target==0)return 2;
            if(target==nums[ind] || target==0)return 1;
            return 0;
        }
        int notTake = countSubsetsWithSumK(ind-1,target,nums);
        int take = 0;
        if(nums[ind]<=target)take=countSubsetsWithSumK(ind-1,target-nums[ind],nums);
        return take+notTake;
    }

    int countPartitionWithSumK(vector<int>&nums, int target){
        int totalSum=0;
        int n =nums.size();
        for(int i=0;i<n;i++)totalSum+=nums[i];
        if(totalSum-target <0 || (totalSum-target)%2==1)return 0;
        return countSubsetsWithSumK(n-1,(totalSum-target)/2,nums);
    }
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        return countPartitionWithSumK(nums,target);
    }
};
